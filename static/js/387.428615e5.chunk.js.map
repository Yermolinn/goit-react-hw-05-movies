{"version":3,"file":"static/js/387.428615e5.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/NetflixLoader.jsx","components/Toast/Toast.jsx","services/constans.js","services/API.js","services/hooks.js","services/funcs.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  gap: 36px;\n  opacity: 0;\n  transition: opacity 1500ms;\n  &.loaded {\n    opacity: 1;\n  }\n`;\n\nexport const CastItem = styled.li`\n  max-width: 180px;\n  list-style: none;\n`;","import { useParams } from 'react-router-dom';\nimport { useEffect, useRef } from 'react';\nimport Message from '../Toast/Toast';\nimport { after } from 'underscore';\nimport NetflixLoader from 'components/Loader/NetflixLoader';\nimport useFetch from 'services/hooks';\nimport STATUS from 'services/constans';\nimport { CastList, CastItem } from './Cast.styled';\nimport { animateScroll as scroll } from 'react-scroll';\n\nconst Cast = () => {\n  const { cast, fetchCast, contentIsLoading, setContentIsLoading, status } =\n    useFetch();\n  const { moviesId } = useParams();\n  const { current: fetch } = useRef(fetchCast);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: `movie/${moviesId}/credits`, controller });\n    scroll.scrollMore(500);\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, moviesId]);\n\n  const onComplete = after(cast.length, () => {\n    setContentIsLoading(false);\n  });\n\n  return (\n    <>\n      {contentIsLoading && (\n        <NetflixLoader column={6} height={270} width={180} />\n      )}\n      {status === STATUS.resolved && !!cast.length && (\n        <CastList className={!contentIsLoading && 'loaded'}>\n          {cast.map(({ id, name, original_name, character, profile }) => (\n            <CastItem key={id}>\n              <img\n                src={profile}\n                alt={name}\n                width=\"180\"\n                height=\"270\"\n                onLoad={onComplete}\n                onError={onComplete}\n              />\n              <p>{original_name}</p>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Cast;\n","import ContentLoader from 'react-content-loader';\n\nconst NetflixLoader = props => {\n  const { column = 4, height = 450, width = 300 } = props;\n  const rows = 3;\n  const columns = column;\n  const coverHeight = height;\n  const coverWidth = width;\n  const padding = 10;\n  const speed = 1;\n\n  const coverHeightWithPadding = coverHeight + padding;\n  const coverWidthWithPadding = coverWidth + padding;\n  const initial = 35;\n  const covers = Array(columns * rows).fill(1);\n\n  return (\n    <ContentLoader\n      speed={speed}\n      width={columns * coverWidthWithPadding}\n      height={rows * coverHeightWithPadding}\n      // {...props}\n    >\n      {covers.map((g, i) => {\n        let vy = Math.floor(i / columns) * coverHeightWithPadding + initial;\n        let vx =\n          (i * coverWidthWithPadding) % (columns * coverWidthWithPadding);\n        return (\n          <rect\n            key={i}\n            x={vx}\n            y={vy}\n            rx=\"0\"\n            ry=\"0\"\n            width={coverWidth}\n            height={coverHeight}\n          />\n        );\n      })}\n    </ContentLoader>\n  );\n};\n\nexport default NetflixLoader;\n","import { Toaster } from 'react-hot-toast';\n\nconst Message = () => {\n  return <Toaster position=\"top-center\" reverseOrder={false} />;\n};\n\nexport default Message;\n","const STATUS = {\n  idle: 'IDLE',\n  pending: 'PENDING',\n  resolved: 'RESOLVED',\n  error: 'ERROR',\n};\n\nexport default STATUS;","import axios from 'axios';\nconst API_KEY = 'c37d4b7e60468bc94e880299c0a50c58';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchMovies = async ({\n  fetchParams,\n  query = null,\n  controller,\n}) => {\n  const response = await axios(fetchParams, {\n    signal: controller.signal,\n    params: { api_key: API_KEY, query },\n  });\n  return response.data;\n};\n\n","import { useState } from 'react';\nimport { fetchMovies } from './API';\nimport {\n  normalizeMovies,\n  normalizeMovie,\n  normalizeCast,\n  normalizeReview,\n} from './funcs';\nimport STATUS from './constans';\nimport toast from 'react-hot-toast';\n\nconst useFetch = () => {\n  const [movies, setMovies] = useState([]);\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [contentIsLoading, setContentIsLoading] = useState(false);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  const fetchMoviesList = params => {\n    setStatus(STATUS.pending);\n    setContentIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (response.results.length === 0) {\n          setStatus(STATUS.resolved);\n          setContentIsLoading(false);\n          return toast.error('Nothing found!');\n        }\n        const movies = normalizeMovies(response.results);\n        setMovies(movies);\n        setStatus(STATUS.resolved);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.error);\n          setContentIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchMovie = params => {\n    setStatus(STATUS.pending);\n    setContentIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        setMovie(normalizeMovie(response));\n        setStatus(STATUS.resolved);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.error);\n          setContentIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetchCast = params => {\n    setStatus(STATUS.pending);\n    setContentIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (response.cast.length === 0) {\n          setStatus(STATUS.resolved);\n          setContentIsLoading(false);\n          return toast.error(\"We don't have any cast for this movie\");\n        }\n        setCast(normalizeCast(response.cast));\n        setStatus(STATUS.resolved);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setStatus(STATUS.error);\n          setContentIsLoading(false);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  const fetcReviews = params => {\n    setStatus(STATUS.pending);\n    setContentIsLoading(true);\n    fetchMovies(params)\n      .then(response => {\n        if (response.results.length === 0) {\n          setContentIsLoading(false);\n          setStatus(STATUS.resolved);\n          return toast.error(\"We don't have any reviews for this movie\");\n        }\n        setReviews(normalizeReview(response.results));\n        setStatus(STATUS.resolved);\n      })\n      .catch(error => {\n        if (error.message !== 'canceled') {\n          setContentIsLoading(false);\n          setStatus(STATUS.error);\n          toast.error(error.message);\n        }\n      });\n  };\n\n  return {\n    movies,\n    fetchMoviesList,\n    movie,\n    fetchMovie,\n    cast,\n    fetchCast,\n    reviews,\n    fetcReviews,\n    contentIsLoading,\n    setContentIsLoading,\n    status,\n    setStatus,\n  };\n};\n\nexport default useFetch;","export const normalizeMovies = movies =>\n  movies.map(({ title, id, poster_path, vote_average }) => {\n    const poster = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://placehold.co/500x750/png';\n\n    const averageVote = vote_average && Math.round(vote_average * 10);\n    return { title, id, poster, averageVote };\n  });\n\nexport const normalizeMovie = ({\n  release_date,\n  title,\n  poster_path,\n  popularity,\n  backdrop_path,\n  id,\n  tagline,\n  genres,\n  overview,\n}) => {\n  const date = release_date\n    ? release_date.split('-')[0]\n    : 'No release information';\n\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n    : 'https://placehold.co/500x750/png';\n  const genreList = genres.map(genre => genre.name).join(' ');\n  const genre = genreList.length ? genreList : 'No genre information';\n\n  return {\n    date,\n    title,\n    tagline,\n    id,\n    poster,\n    popularity: popularity + '',\n    backdrop_path,\n    genre,\n    overview,\n  };\n};\n\nexport const normalizeCast = cast =>\n  cast.map(({ id, name, original_name, character, profile_path }) => {\n    const profile = profile_path\n      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n      : 'https://placehold.co/80x100/png';\n    return {\n      id,\n      name,\n      original_name,\n      character,\n      profile,\n    };\n  });\n\nexport const normalizeReview = reviews =>\n  reviews.map(({ author, author_details: { avatar_path }, content, id }) => {\n    let avatar = null;\n    if (avatar_path && !avatar_path?.includes('https')) {\n      avatar = `https://image.tmdb.org/t/p/w500/${avatar_path}`;\n    } else {\n      avatar = 'https://placehold.co/80x80/png';\n    }\n\n    return { author, content, id, avatar };\n  });"],"names":["CastList","styled","CastItem","useFetch","cast","fetchCast","contentIsLoading","setContentIsLoading","status","moviesId","useParams","fetch","useRef","current","useEffect","controller","AbortController","fetchParams","scroll","abort","onComplete","after","length","NetflixLoader","column","height","width","STATUS","className","map","id","name","original_name","character","profile","src","alt","onLoad","onError","props","columns","coverHeight","coverWidth","coverHeightWithPadding","coverWidthWithPadding","covers","Array","fill","speed","g","i","vy","Math","floor","vx","x","y","rx","ry","position","reverseOrder","idle","pending","resolved","error","axios","fetchMovies","query","signal","params","api_key","response","data","useState","movies","setMovies","movie","setMovie","setCast","reviews","setReviews","setStatus","fetchMoviesList","then","results","toast","title","poster_path","vote_average","poster","averageVote","round","normalizeMovies","catch","message","fetchMovie","release_date","popularity","backdrop_path","tagline","genres","overview","date","split","genreList","genre","join","normalizeMovie","profile_path","normalizeCast","fetcReviews","author","avatar_path","author_details","content","avatar","includes","normalizeReview"],"sourceRoot":""}